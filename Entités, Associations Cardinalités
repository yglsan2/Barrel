// ==UserScript==
// @name         Barrel MCD
// @namespace    http://tampermonkey.net/
// @version      11.0
// @description  Modélisation Merise 
// @author       yglsan
// @license      GPL-3.0
// @match        *://*/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Styles complets
    GM_addStyle(`
        .mcd-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: white;
            z-index: 2147483647;
            overflow: auto;
        }

        .entity {
            position: absolute;
            background: #f8f9fa;
            border: 2px solid #3498db;
            border-radius: 8px;
            padding: 15px;
            min-width: 240px;
            cursor: move;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }

        .association {
            border-color: #f1c40f;
            background: #fff3cd;
            min-height: 120px;
        }

        .connector {
            width: 24px;
            height: 24px;
            background: #2ecc71;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            cursor: pointer;
            transform: translateY(-50%);
            transition: all 0.3s;
            border: 2px solid white;
            z-index: 1000;
        }

        .connector.connected {
            background: #3498db;
            box-shadow: 0 0 12px rgba(52,152,219,0.4);
        }

        .connector.left { left: -30px; }
        .connector.right { right: -30px; }

        .connection {
            stroke: #3498db;
            stroke-width: 3;
            fill: none;
            marker-end: url(#arrowhead);
        }

        .cardinality-panel {
            position: absolute;
            background: white;
            padding: 8px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            cursor: move;
            z-index: 1001;
        }

        .attribute-list {
            margin-top: 15px;
        }

        .attribute-row {
            display: flex;
            gap: 8px;
            margin: 8px 0;
        }

        .type-select {
            min-width: 120px;
            padding: 4px;
        }

        .entity-header input {
            width: 100%;
            padding: 8px;
            margin-bottom: 12px;
        }

        .add-attribute-btn {
            margin-top: 10px;
            padding: 6px 12px;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    `);

    // Structure DOM
    const container = document.createElement('div');
    container.className = 'mcd-container';
    document.body.appendChild(container);

    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.innerHTML = `
        <defs>
            <marker id="arrowhead" viewBox="0 0 10 10" refX="9" refY="5" markerWidth="8" markerHeight="8" orient="auto">
                <path fill="#3498db" d="M0,0 L10,5 L0,10 z"/>
            </marker>
        </defs>
    `;
    container.appendChild(svg);

    // Variables globales
    let currentConnection = null;
    const connections = [];
    const cardinalityRules = {
        '0,1': ['1,1', '1,N'],
        '1,1': ['0,1', '1,N'],
        '0,N': ['1,1', '1,N'],
        '1,N': ['0,1', '1,1', '0,N']
    };

    // Classe principale
    class MCDElement {
        constructor(isAssociation = false) {
            this.isAssociation = isAssociation;
            this.element = document.createElement('div');
            this.element.className = isAssociation ? 'association entity' : 'entity';
            this.element.style.left = `${Math.random() * 500 + 100}px`;
            this.element.style.top = `${Math.random() * 300 + 100}px`;

            this.initHeader();
            this.initConnectors();
            if (!isAssociation) this.initAttributes();
            this.makeDraggable();
            
            container.appendChild(this.element);
            this.element.scrollIntoView({ behavior: 'smooth' });
        }

        initHeader() {
            const header = document.createElement('div');
            header.className = 'entity-header';
            
            const input = document.createElement('input');
            input.placeholder = this.isAssociation ? 'Nom de l\'association' : 'Nom de l\'entité';
            
            header.appendChild(input);

            if (!this.isAssociation) {
                const addBtn = document.createElement('button');
                addBtn.className = 'add-attribute-btn';
                addBtn.textContent = '+ Ajouter attribut';
                addBtn.onclick = () => this.addAttribute();
                header.appendChild(addBtn);
            }

            this.element.appendChild(header);
        }

        initAttributes() {
            this.attributesContainer = document.createElement('div');
            this.attributesContainer.className = 'attribute-list';
            this.element.appendChild(this.attributesContainer);
            this.addAttribute();
        }

        addAttribute() {
            const row = document.createElement('div');
            row.className = 'attribute-row';

            const nameInput = document.createElement('input');
            nameInput.placeholder = 'Nom attribut';
            nameInput.style.flex = '1';

            const typeSelect = document.createElement('select');
            typeSelect.className = 'type-select';
            [
                'VARCHAR(255)', 'INT', 'SMALLINT', 'BIGINT', 'DECIMAL', 'NUMERIC',
                'DATE', 'TIME', 'DATETIME', 'TIMESTAMP', 'YEAR',
                'CHAR', 'TEXT', 'BLOB', 'ENUM', 'SET',
                'BOOLEAN', 'BIT', 'BINARY', 'VARBINARY',
                'FLOAT', 'DOUBLE', 'REAL', 'JSON'
            ].forEach(type => {
                const option = document.createElement('option');
                option.textContent = type;
                typeSelect.appendChild(option);
            });

            row.appendChild(nameInput);
            row.appendChild(typeSelect);
            this.attributesContainer.appendChild(row);
        }

        initConnectors() {
            ['left', 'right'].forEach(side => {
                const connector = document.createElement('div');
                connector.className = `connector ${side}`;
                connector.addEventListener('click', (e) => this.handleConnector(e));
                this.element.appendChild(connector);
            });
        }

        handleConnector(e) {
            const connector = e.target;
            if (connector.classList.contains('connected')) return;

            if (!currentConnection) {
                this.startConnection(connector);
            } else {
                this.finalizeConnection(connector);
            }
        }

        startConnection(connector) {
            currentConnection = {
                start: { element: this, connector },
                path: document.createElementNS('http://www.w3.org/2000/svg', 'path'),
                panels: []
            };

            currentConnection.path.className = 'connection';
            svg.appendChild(currentConnection.path);
            connector.classList.add('active');

            document.addEventListener('mousemove', this.updateConnection);
        }

        updateConnection = (e) => {
            const startRect = currentConnection.start.connector.getBoundingClientRect();
            currentConnection.path.setAttribute('d', `
                M ${startRect.left + 12} ${startRect.top + 12}
                Q ${(startRect.left + e.clientX)/2} ${(startRect.top + e.clientY)/2}
                ${e.clientX} ${e.clientY}
            `);
        }

        finalizeConnection(endConnector) {
            const endElement = endConnector.parentElement.mcdElement;
            
            currentConnection.end = { element: endElement, connector: endConnector };
            endConnector.classList.add('connected');
            
            this.createCardinalityPanels();
            this.drawFinalConnection();
            connections.push(currentConnection);
            currentConnection = null;
        }

        createCardinalityPanels() {
            [currentConnection.start, currentConnection.end].forEach((point, index) => {
                const panel = document.createElement('div');
                panel.className = 'cardinality-panel';
                
                const select = document.createElement('select');
                select.dataset.side = index ? 'end' : 'start';
                Object.keys(cardinalityRules).forEach(opt => {
                    const option = document.createElement('option');
                    option.textContent = opt;
                    select.appendChild(option);
                });

                select.addEventListener('change', (e) => this.updateCardinalityRules(e.target));
                panel.appendChild(select);
                this.positionPanel(panel, point.connector);
                this.makePanelDraggable(panel);
                container.appendChild(panel);
                currentConnection.panels.push(panel);
            });
        }

        positionPanel(panel, connector) {
            const rect = connector.getBoundingClientRect();
            panel.style.left = `${rect.left + 30}px`;
            panel.style.top = `${rect.top - 30}px`;
        }

        makePanelDraggable(panel) {
            let isDragging = false;
            let offsetX, offsetY;

            panel.addEventListener('mousedown', (e) => {
                isDragging = true;
                offsetX = e.clientX - panel.offsetLeft;
                offsetY = e.clientY - panel.offsetTop;
                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', stop);
            });

            const drag = (e) => {
                if (!isDragging) return;
                panel.style.left = `${e.clientX - offsetX}px`;
                panel.style.top = `${e.clientY - offsetY}px`;
            };

            const stop = () => {
                isDragging = false;
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stop);
            };
        }

        drawFinalConnection() {
            const updatePath = () => {
                const start = currentConnection.start.connector.getBoundingClientRect();
                const end = currentConnection.end.connector.getBoundingClientRect();
                currentConnection.path.setAttribute('d', `
                    M ${start.left + 12} ${start.top + 12}
                    Q ${(start.left + end.left)/2} ${(start.top + end.top)/2 + 40}
                    ${end.left + 12} ${end.top + 12}
                `);
            };
            
            updatePath();
            document.removeEventListener('mousemove', this.updateConnection);
        }

        makeDraggable() {
            let isDragging = false;
            let offsetX, offsetY;

            this.element.addEventListener('mousedown', (e) => {
                if (e.target.classList.contains('connector')) return;
                
                isDragging = true;
                offsetX = e.clientX - this.element.offsetLeft;
                offsetY = e.clientY - this.element.offsetTop;

                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', stop);
            });

            const drag = (e) => {
                if (!isDragging) return;
                const x = e.clientX - offsetX;
                const y = e.clientY - offsetY;
                
                this.element.style.left = `${x}px`;
                this.element.style.top = `${y}px`;
                
                connections.forEach(conn => {
                    if (conn.start.element === this || conn.end.element === this) {
                        const start = conn.start.connector.getBoundingClientRect();
                        const end = conn.end.connector.getBoundingClientRect();
                        conn.path.setAttribute('d', `
                            M ${start.left + 12} ${start.top + 12}
                            Q ${(start.left + end.left)/2} ${(start.top + end.top)/2 + 40}
                            ${end.left + 12} ${end.top + 12}
                        `);
                    }
                    conn.panels.forEach((panel, i) => this.positionPanel(panel, conn[i ? 'end' : 'start'].connector));
                });
            };

            const stop = () => {
                isDragging = false;
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stop);
            };
        }
    }

    // Barre d'outils
    const toolbar = document.createElement('div');
    toolbar.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        background: white;
        padding: 12px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        z-index: 9999;
        display: flex;
        gap: 8px;
    `;

    ['Entité', 'Association'].forEach(type => {
        const btn = document.createElement('button');
        btn.textContent = type;
        btn.style.cssText = `
            padding: 8px 16px;
            background: ${type === 'Entité' ? '#3498db' : '#f1c40f'};
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        `;
        btn.onclick = () => new MCDElement(type === 'Association');
        toolbar.appendChild(btn);
    });

    container.appendChild(toolbar);

    // Initialisation des références
    HTMLElement.prototype.mcdElement = null;
})();
